#
# Copyright (C) 2025 Badabing2005
# SPDX-FileCopyrightText: 2025 Badabing2005
# SPDX-License-Identifier: AGPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License
# for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# Also add information on how to contact you by electronic and paper mail.
#
# If your software can interact with users remotely through a computer network,
# you should also make sure that it provides a way for users to get its source.
# For example, if your program is a web application, its interface could
# display a "Source" link that leads users to an archive of the code. There are
# many ways you could offer source, and different solutions will be better for
# different programs; see section 13 for the specific requirements.
#
# You should also get your employer (if you work as a programmer) or school, if
# any, to sign a "copyright disclaimer" for the program, if necessary. For more
# information on this, and how to apply and follow the GNU AGPL, see
# <https://www.gnu.org/licenses/>.

name: Build for All platforms

env:
  ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Controls when the workflow will run
on:
  # Build on pushes to any branch
  push:
    # Build on branch pushes
    branches:
      - '**'
    # And on tag pushes for releases
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Run on pull requests to main branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tags:
        description: 'Build tags'

jobs:
  # Check each build job individually to see which artifacts already exist
  check_artifacts:
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.get_sha.outputs.commit_sha }}
      build_windows: ${{ steps.check_artifacts.outputs.build_windows }}
      build_windows_arm64: ${{ steps.check_artifacts.outputs.build_windows_arm64 }}
      build_ubuntu_22_04: ${{ steps.check_artifacts.outputs.build_ubuntu_22_04 }}
      build_ubuntu_24_04: ${{ steps.check_artifacts.outputs.build_ubuntu_24_04 }}
      build_mac_old: ${{ steps.check_artifacts.outputs.build_mac_old }}
      build_mac: ${{ steps.check_artifacts.outputs.build_mac }}
      build_appimage: ${{ steps.check_artifacts.outputs.build_appimage }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit SHA
        id: get_sha
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            # For tag pushes, get the commit SHA that the tag points to
            COMMIT_SHA=$(git rev-parse ${{ github.ref_name }}^{commit})
          else
            # For regular pushes, use the current commit SHA
            COMMIT_SHA=${{ github.sha }}
          fi
          echo "commit_sha=${COMMIT_SHA}" >> "${GITHUB_OUTPUT}"

      - name: Check for existing artifacts
        id: check_artifacts
        run: |
          # Define artifact names and their corresponding output variables
          declare -A ARTIFACTS=(
            ["PixelFlasher.exe Artifacts"]="build_windows"
            ["PixelFlasher-ARM64.exe Artifacts"]="build_windows_arm64"
            ["PixelFlasher_Ubuntu_22_04 Artifacts"]="build_ubuntu_22_04"
            ["PixelFlasher_Ubuntu_24_04 Artifacts"]="build_ubuntu_24_04"
            ["PixelFlasher_MacOS_legacy.dmg Artifacts"]="build_mac_old"
            ["PixelFlasher_MacOS.dmg Artifacts"]="build_mac"
            ["PixelFlasher-x86_64.AppImage Artifacts"]="build_appimage"
          )

          # For normal builds, set all jobs to run
          if [[ "${{ github.event_name }}" != "push" || "${{ startsWith(github.ref, 'refs/tags/') }}" != "true" ]]; then
            # For regular builds, run all jobs
            for JOB in "${!ARTIFACTS[@]}"; do
              OUTPUT_VAR="${ARTIFACTS[$JOB]}"
              echo "${OUTPUT_VAR}=true" >> "${GITHUB_OUTPUT}"
              echo "Regular build or PR: Will build $JOB"
            done
            exit 0
          fi

          # For tag pushes, check for existing artifacts and in-progress builds
          COMMIT_SHA=$(git rev-parse ${{ github.ref_name }}^{commit})
          echo "Checking for artifacts and in-progress builds for commit: ${COMMIT_SHA}"

          # First check if there are any in-progress builds for this commit
          IN_PROGRESS_RUNS=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=in_progress&head_sha=${COMMIT_SHA}")

          IN_PROGRESS_COUNT=$(echo "$IN_PROGRESS_RUNS" | jq '.total_count')

          # If there are in-progress builds (excluding this one), wait for them to complete
          if [[ "$IN_PROGRESS_COUNT" -gt 1 ]]; then
            echo "There are in-progress builds for this commit. Will wait for them to complete before proceeding."
            echo "This build will pause for 5 minutes to allow other builds to complete."

            # Sleep for 5 minutes to allow in-progress builds to complete
            sleep 300
          fi

          # Get all workflow runs for this commit (including completed ones)
          WORKFLOW_RUNS=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=${COMMIT_SHA}")

          # Get run IDs from workflow runs
          RUN_IDS=$(echo "$WORKFLOW_RUNS" | jq -r '.workflow_runs[].id')

          # Check each artifact
          for ARTIFACT_NAME in "${!ARTIFACTS[@]}"; do
            OUTPUT_VAR="${ARTIFACTS[$ARTIFACT_NAME]}"
            ARTIFACT_FOUND=false

            for RUN_ID in $RUN_IDS; do
              # Get artifacts for this run
              RUN_ARTIFACTS=$(curl -s \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: Bearer ${{ github.token }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/runs/${RUN_ID}/artifacts")

              # Check if current artifact exists in this run
              ARTIFACT_EXISTS=$(echo "$RUN_ARTIFACTS" | jq --arg name "$ARTIFACT_NAME" '.artifacts[] | select(.name==$name) | .id')

              if [[ -n "$ARTIFACT_EXISTS" ]]; then
                echo "Found existing artifact: $ARTIFACT_NAME, no need to rebuild"
                ARTIFACT_FOUND=true
                break
              fi
            done

            if [[ "$ARTIFACT_FOUND" == "true" ]]; then
              # Skip building this job
              echo "${OUTPUT_VAR}=false" >> "${GITHUB_OUTPUT}"
            else
              # Need to build this job
              echo "${OUTPUT_VAR}=true" >> "${GITHUB_OUTPUT}"
              echo "Did not find artifact: $ARTIFACT_NAME, will rebuild"
            fi
          done

  build_windows:
    needs: check_artifacts
    # Only build if this specific artifact doesn't exist for this commit
    if: ${{ needs.check_artifacts.outputs.build_windows == 'true' }}
    uses: ./.github/workflows/windows.yml
    secrets: inherit

  build_windows_arm64:
    needs: check_artifacts
    if: ${{ needs.check_artifacts.outputs.build_windows_arm64 == 'true' }}
    uses: ./.github/workflows/windows-arm64.yml
    secrets: inherit

  build_ubuntu_22_04:
    needs: check_artifacts
    if: ${{ needs.check_artifacts.outputs.build_ubuntu_22_04 == 'true' }}
    uses: ./.github/workflows/ubuntu_22_04.yml
    secrets: inherit

  build_ubuntu_24_04:
    needs: check_artifacts
    if: ${{ needs.check_artifacts.outputs.build_ubuntu_24_04 == 'true' }}
    uses: ./.github/workflows/ubuntu_24_04.yml
    secrets: inherit

  build_mac_old:
    needs: check_artifacts
    if: ${{ needs.check_artifacts.outputs.build_mac_old == 'true' }}
    uses: ./.github/workflows/mac_old.yml
    secrets: inherit

  build_mac:
    needs: check_artifacts
    if: ${{ needs.check_artifacts.outputs.build_mac == 'true' }}
    uses: ./.github/workflows/mac.yml
    secrets: inherit

  build_appimage:
    needs: check_artifacts
    if: ${{ needs.check_artifacts.outputs.build_appimage == 'true' }}
    uses: ./.github/workflows/appimage-x86_64.yml
    secrets: inherit

  deploy:
    # Make deploy conditional on the check_artifacts job and all build jobs
    needs: [check_artifacts, build_windows, build_windows_arm64, build_ubuntu_22_04, build_ubuntu_24_04, build_mac_old, build_mac, build_appimage]
    # Run only on tag push or manual workflow run, and even if some builds are skipped
    if: always() && (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')

    runs-on: ubuntu-latest

    steps:
      # Get version
      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              version=${GITHUB_REF#refs/tags/v}
          else
              version=0.0.0.${GITHUB_REF#refs/heads/}
          fi
          echo "version=${version}" >> "${GITHUB_OUTPUT}"

      # Download the Windows artifact from the build_windows job
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: PixelFlasher.exe Artifacts
          path: release
        continue-on-error: true

      # Download the Windows arm64 artifact from the build_windows_arm64 job
      - name: Download Windows arm64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: PixelFlasher-ARM64.exe Artifacts
          path: release
        continue-on-error: true

      # Download the Ubuntu_22_04 artifact from the build_ubuntu_22_04 job
      - name: Download Ubuntu_22_04 Artifact
        uses: actions/download-artifact@v4
        with:
          name: PixelFlasher_Ubuntu_22_04 Artifacts
          path: release
        continue-on-error: true

      # Download the Ubuntu_24_04 artifact from the build_ubuntu_24_04 job
      - name: Download Ubuntu_24_04 Artifact
        uses: actions/download-artifact@v4
        with:
          name: PixelFlasher_Ubuntu_24_04 Artifacts
          path: release
        continue-on-error: true

      # Download the macOS artifacts for Older macOS Version
      - name: Download macOS Artifacts for Older macOS Versions
        uses: actions/download-artifact@v4
        with:
          name: PixelFlasher_MacOS_legacy.dmg Artifacts
          path: release
        continue-on-error: true

      # Download the macOS artifacts from the build_mac job
      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: PixelFlasher_MacOS.dmg Artifacts
          path: release
        continue-on-error: true

      # Download the AppImage artifacts from the appimage-x86_64 job
      - name: Download AppImage Artifacts
        uses: actions/download-artifact@v4
        with:
          name: PixelFlasher-x86_64.AppImage Artifacts
          path: release
        continue-on-error: true

      # List the artifacts downloaded
      - name: List contents of dist directory
        run: ls ${{ github.workspace }}/release*

      # Create release
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          # body_path: RELEASE.md
          body: |

            ## Which file to download?
            A description of the various artifacts is in the [README](https://github.com/badabing2005/PixelFlasher#release-files)
          draft: true
          prerelease: false
          files: |
            release/*
        continue-on-error: true
